Project # 0: Programming Tips/Guidelines:

1. At the beginning of each file that you submit
   for grading, include this documentation:

/**
 * Give the purpose of this file
 * @author Name(s) of programmer(s)
 * @since Date last modified
 * @see list of files that this file directly references
 */
 
 Note: You may use more than one @author tag if the
 code is written by more than one programmer.
 
2. At the beginning of every method except for abstract
   methods defined in an interface or in other classes
   whose Javadocs are inherited, include the following
   documentation:
   
/**
 * Give the purpose of this subroutine
 * Use the following @param tag for each parameter:
 * @param nameOfTheParameter and its purpose
 * Use the @return tag for value-returning subroutines
 * @return state what this subroutine returns
 * if it is not void
   
3. Avoid unnecessary comparisons when writing boolean 
   expressions.
   
4. Loops should not make unnecessary iterations.

5. Avoid local variables if the values being stored in
   them are used only once; use local variables only if you
   need to store a calculated value that is going to be used
   more than once.
   
6. Use camelcase and descriptive names for variables except
   for loop counters and array subscripts or coordinates
   and other names for which one character is acceptable by
   convention.
   
7. Indent within code blocks such as if-statements, loops,
   methods, enumerated types, classes, interfaces, etc.
   
8. How to generate random numbers:

   a. Required package: java.util.Random;
   b. Create and seed the random number generator using the current time
      of day so that you don't get the same pseudorandom sequence
      every time you generate a new number:
	  
      Random generator = new Random(System.currentTimeMillis());
	  
   c. To generate random integers in the range [0, n-1]
   
      int randInt = generator.nextInt(n).
	  
      eg: generator.nextInt(100) will generate a random number in the range [0, 99]
	  
      To generate random doubles in the range [0,1]
	  
      double randDbl = generator.nextDouble();
	  
9. How to measure approximate execution time for a code segment:
	
    long start = System.nanoTime();
    executeSomeCode();
    long elapsed = System.nanoTime() - start;
        
    You can replace System.nanoTime() with System.currentTimeMillis() if you need the time 
    in milliseconds. Note: microseconds = nanoseconds / 1000.0;

10. Occasionally the ternary operator may come in handy, for example, when you wish to 
    write an if...else statement in a compact way.
	
	syntax: boolExpr ?  expr1 : expr2
	
	If the boolean is true, expr1 is evaluated; otherwise, expr2 is evaluated.
	
	Consider the example below without and with the use of the ternary operator:
	
	if (x > 5)
	   System.out.println("greater");
	else
	   System.out.println("greater");
    
	or 
	
    System.out.println(x > 5 ? "greater" : "less");		  
	  
     
   
 
 
 