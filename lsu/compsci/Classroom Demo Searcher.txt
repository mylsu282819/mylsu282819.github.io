package searcherdemo;

/**
 * Implementation for the binary and linear search algorithms
 * @author Duncan
 * @since 99-99-9999
 */
public class Searcher 
{
    /**
     * Return the index of the first occurrence of the 
     * search key in the specified array or -1 if it is
     * not in the array
     * @param data an array of integers
     * @param searchKey the target of the search
     * @return the index of the first occurrence of the 
     * search key or -1 if the search key is not in the array 
     */
    public static int linearSearch(int[] data, int searchKey)
    {
        for (int i = 0; i < data.length; i++)
        {
            if (searchKey == data[i])
                return i;
        }
        return -1;
    }
	
    /**
     * Return the index of an occurrence of the search key
     * in the specified array or -1-insPos if it is
     * not in the array, where insPos is the position at which
     * the search key would have been found had it been in the 
     * array
     * @param data an array of integers
     * @param searchKey the target of the search
     * @return the index of an occurrence of the 
     * search key or -1-insPos, if the search key is not in the 
     * array, where insPos is where the search key would have been
     * found had it been in the array
     */    
    public static int binarySearch(int[] list, int searchKey)
    {
        int low = 0, mid, high = list.length-1;
        while (low <= high)
        {
            mid = (low + high) / 2;
            if (searchKey == list[mid])
                return mid;
            else if (searchKey < list[mid])
                high = mid - 1;
            else
                low = mid + 1;            
        }
        return -1 - low;
    }
}
