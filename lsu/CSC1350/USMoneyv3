package usmoneydemo;

/**
 * Describe US currency
 * @author Duncan
 * @since 99-99-9999
 * @version 3 added default constructor and
 * several parameterized constructors
 */
public class USMoney 
{
    /**
     * the number of dollars
     */
    private int dollars;
    
    /**
     * the number of cents
     */
    private int cents;
    
    /**
     * Creates a penny
     */
    public USMoney()
    {
        cents = 1;
    }
    
    /**
     * Creates the specified number of dollars
     * @param d the number of dollars
     * @throws IllegalArgumentException when d <= 0
     */
    public USMoney(int d) throws IllegalArgumentException
    {
        if (d <= 0)
            throw new IllegalArgumentException("Must creates at least a dollar");
        dollars = d;
    }
    
    /**
     * Creates a amount with the specified number of dollars and cents
     * @param d the number of dollars
     * @param c the number of cents
     * @throws IllegalArgumentException when
     * d < 0 || c < 0 || c > 99 || (c==0 && d == 0)
     */
    public USMoney(int d, int c) throws IllegalArgumentException
    {
        if (d < 0 || c < 0 || c > 99 || (c==0 && d == 0))
            throw new IllegalArgumentException("Cannot an illegal amount");        
        dollars = d;
        cents = c;        
    }
    
    /**
     * Creates the specified amount
     * @param amt the amount
     * @throws IllegalArgumentException when
     * amt <= 0 || (amt-(int)(amt)) > 0.99
     */
    public USMoney(double amt) throws IllegalArgumentException
    {
        if (amt <= 0 || (amt-(int)(amt)) > 0.99)
            throw new IllegalArgumentException("Cannot an illegal amount");                    
        dollars = (int) amt;
        cents = ((int)(amt*100.0))%100;        
    }
	
    /**
     * Creates a USMoney object equivalent to the specified object
     * (copy constructor)
     * @param m an object of this class
     */
    public USMoney(USMoney m)
    {                    
        dollars = m.dollars;
        cents = m.cents;
    }	
	
    /**
     * Gives the number of dollars in this object
     * @return the number of dollars
     */
    public int getDollars()
    {
        return dollars;
    }
    
    /**
     * Gives the number of cents in this object
     * @return the number of cents
     */
    public int getCents()
    {
        return cents;
    }
    
    /**
     * Modifies this object using the specified parameters
     * @param d the new number of dollars
     * @param c the new number of cents
     * @throws IllegalArgumentException when
     * d < 0 || c < 0 || c > 99 || (c==0 && d == 0)
     */
    public void setUSMoney(int d, int c) throws IllegalArgumentException
    {
        if (d < 0 || c < 0 || c > 99 || (c==0 && d == 0))
            throw new IllegalArgumentException("Cannot modify this amount to an illegal amount");
        dollars = d;
        cents = c;
    }
    
    /**
     * Gives the string representation of this object in the format
     * $d.cc
     * @return the string representation of this object in the format $d.cc
     */
    public String toString()
    {
        return String.format("$%d.%02d",dollars,cents);
    }
    
    /**
     * Determines whether this object is equivalent to the specified object
     * @param m an object of this class
     * @return true when this object is equivalent to the specified object; otherwise,
     * false
     */
    public boolean equals(USMoney m)
    {
        if (m == null)
            return false;
        return dollars == m.dollars && cents == m.cents;
    }
}
