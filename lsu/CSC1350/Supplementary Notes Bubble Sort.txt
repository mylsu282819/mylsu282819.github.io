Summary of Bubble Sort 
(from 5.4* Computer Science An Overview 11/e, J Glenn Brookshear)  
   
BUBBLE SORT:   

int[] list = {4, 5, 32, 6, 4, 6, 5};

Using the array declaration above and the bubbleSort method below:

public static void bubbleSort(int[] data)
{
   int temp, partitionIndex = data.length - 1, i;
   boolean notFinished;
   do
   {
      notFinished = false;
      for (i = 0; i < partitionIndex; i++)
      {
         if (data[i] > data[i+1])
         {
            temp = data[i];
            data[i] = data[i+1];
            data[i+1] = temp;
            notFinished = true;
         }
      }
      partitionIndex--;
   }while(notFinished);
}   
   
a) Trace the action of the bubble sort algorithm on
   the list array showing the contents of the 
   array after each pass.
   
   Ans:                                         #pairs compared      #swaps                                                                                
   pass # 1:  4  5  6  4  6  5  |  32           6                    4                                                                                          
          2:  4  5  4  6  5  |  6  32           5                    2                                                                                          
          3:  4  4  5  5  |  6  6  32           4                    2                                                                                          
          4:  4  4  5  |  5  6  6  32           3                    0 
		  
   sorted array: {4, 4, 5, 5, 6, 6, 32} 

                                     
b) How many passes are required to sort the array?
   Ans: 4 passes		
   
c) How many pairs of elements of the array are compared?
   Ans: 18 pairs

d) what are the number of comparisons, number of additions
   and number of swaps carried out during the execution of the algorithm?
   
   Ans: 
   Comparisons:
   (6+5+4+3) comparing pairs
   (7+6+5+4) comparisons involving the loop counter 
   4 involving do..while termination - one after each pass
   Total Comparisons  44
   
   8 swaps
   
   Additions/Subtractions:
   18 additions for updating loop index (i++) (always the same as number of pairs)
   18 additions in the if statement (same as number of pairs)
   16 for the two data[i+1]s in the if statement (same as twice number of swaps)
   4 subtractions for partitionIndex--, one for each pass (iteration of the outer loop)
   Total: 56 adds/subs
   
   Note: When a pass is made and no elements are swapped then the array
   is sorted and the algorithm terminates.
   
d) Suppose this task was performed on a CPU that takes
   6 microseconds to swap data in memory, 3 microseconds
   to compare two integers and 5 microseconds to do an addition. 
   Ignoring all other operations, approximately how long will it take 
   the array to be sorted?
   
   Ans: 8 * 6  = 48 microseconds for the swaps
        44 * 3 = 132 microseconds for the comparisons
        56 * 5 = 280 microseconds for the additions
               = 460 microseconds for the task  
e) List all the pairs of elements of the array that are compared during each pass
   in the order in which they are compared.
   (Left as an exercise for you)		   
