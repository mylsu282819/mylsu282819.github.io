Lecture #2: (Jan 15)
1.  Sets, Venn diagrams,.

2.  Descriptions of 4 kinds of items in terms of two given sets A and B.

3.  Cardinality of a set, the rule |A U B| = |A| + |B| - |A intersection B|.

4.  Subsets and counting #(subsets of {1, 2, ..., n}).



PRACTICE QUESTIONS (on the importance of counting various things; bring written solutions to the class on Jan 15):

1.  Give 3 good reasons for determining the number of students in a course (i.e., 3 good uses of this number).

2.  Give 3 good reasons for determining the number of students attending LSU in Spring 2019.

3.  Give 3 things that we should count in a computer program to get an idea about it.

4.  Show all possible ways you can choose  a manager and an assistant manager out of 4 candidates Adam, Betty, Cindy, and David.




Lecture #3 (Jan 17)
1.  DeMorgan's laws.

2.  Distributive laws for union and intersection.

3.  Generalization of |A U B| = |A| +|B| - |A intersection B| for 3 sets A, B, and C.

4.  Venn diagrams of various subsets related to three sets A, B, and C.


Lecture #4 (Jan 22)
1.  Review of short-quiz #1.

2..  Counting subsets of a given size:  C(n,m) = #(subsets of size m out of {1, 2, ..., n}) using different techniques and deriving different formulas for C(n,m).

     (a) m.C(n, m) = (n-m+1).C(n-1, m-1) for n >= m >= 1

     (b) C(n, m) = C(n-1, m-1) + C(n-1, m) for n >=2 and m >= 1

     (c) C(n,0) = C(n, n) = 1 (because empty-set is the only subset of size 0 and the whole set is the only n-subset of an n-set).



Lecture #5 (Jan 24)
There will be a short quiz on Thursday Jan 24.

1.  Why is it that C(5,2) = C(5,3), both being equal to 10?  More generally, why is C(n,m) = C(n,n-m) for 0 <= m <= n.

2. How many ways can we form a committee of 3 people by choosing 2 men out n men and 1 women out of m women?   If {x1, x2, ..., xn} are the men and {y1, y2, ..., ym} are the women, then show the various committees.

3.  Computing all C(n, m) for 0 <= m <= n = N.


Lecture #6 (Jan 29)
 

1.  Review of last week's short-quiz.

2.  Use of symmetry property C(n,m) = C(n, n-m) to reduce computation of all C(n, m) for 0 <= m <= n <= N for a fixed N.

3.  Computing a particular C(n, m).



Lecture #7 (Jan 31)
1.  Computation of a particular C(n,m) using C(n,m) = n*C(n-1,m-1)/m and using (n-m+1)*C(n,m-1)/m.

2.  Computation of intersection, union, complementation of subsets, etc using 0/1 array-representation.



Lecture #8 (Feb 05)
Long-quiz #1, 1 hr 10 min.  No lecture.


Lecture #9 (Feb 07)
1.  Review of long-quiz#1.


Lecture #10 (Feb 12)
1.  (Contd.)  Review of Long-Quiz #1.

2.  Analysis of computation time for testing set equality, subset property, etc.

3.  Permutations, P(n, m), and the relationship between P(n, m) and C(n, m).


Lecture #11 (Feb 14)
There will be a short-quiz on Thursday.



1.  Review of short-quiz.

2.  Permutations and their relationship to combinations.

3.  Applications.

4.  Graphs and Digraphs.


Lectue #12 (Feb 19)
There will be a short-quiz on Feb 19 (see some related practice questions below).  

1.  Counting #(acyclic paths between two nodes in a complete digraph).

2.  Planar graphs.


Lecture #13 (Feb 21)
Review of short-quiz on Feb 21

1.  Non-planar graphs K_5 and K_{3,3}.

2.  Maximal planar graphs.

3.  Euler's equations for planar graphs


Lecture #14 (Feb 26)
1.  Euler equation and the need for assuming connectedness of the planar graph.

2.  Definition of a connected graph (two forms).

3.  Euler equation for disconnected planar graph.

4.  Condition for a disconnected graph to be planar.

5. Trees and number of trees.

6.  Rooted trees


Lecture #15 (Feb 28)


1. Each tree with n >= 2 nodes has at least two nodes of degree 1.

2. Each connected graph contains a tree connecting all nodes; such a tree is called a spanning tree.

3. The complete graph on N nodes has n^{n-2} spanning trees.

4. Number of ways to label the nodes of an undirected path O----O----O--...--O on n nodes using the labels {1, 2, ..., n}.

5. Average size of a subset of an n-set.

6. Average length of an acyclic path from node 1 to node n in the complete digraph on n nodes in approx. n-2 for n>=4.

7. Matrix representation of graphs and digraphs.


Lecture #16 (Mar 07)
Long quiz #2 (mid term).


Lecture #17 (Mar 12)
1.  Review of mid-term exam.

2. Symmetric (binary) relation: examples.

3. Counting such relations.

4. Code to test the symmetric property of a binary relation given as an NxN matrix R[x][y].

5. Performance analysis of the code.


Lecture #18 (Mar 14)
1. Counting symmetric relations.

2. Code to test the symmetric property of a binary relation given as an NxN matrix R[x][y].

3. Performance analysis of the code.


Lecture #19 (Mar 19)
There is a short quiz on Mar 19.  It is important that you work on the practice  question.

1. Review of the quiz questions after the quiz.

2. Code to test symmetry property of a relation matrix.



Lecture #20 (Mar 21)
1.  Determine average number of iterations for testing symmetric property of a relation matrix.

2.  Reflexive relations, counting them.

3.  Counting relations that are both reflexive and symmetric, that are symmetric but not reflexive, and that are reflexive but not-symmetric.


Lecturre #21 (Mar 26)
1.Code for reflexive relations and counting average number of comparisons "R[i][i] != 1".

2. Transitive relations.

3.  Equivalence relations.

4.  Linear orders and partial orders.


Lecture #22 (Mar 28)

Lecture #23 (Apr 02)
1.  Long quiz.


Lecture #24 (Apr. 04)
1.  Review of last long-quiz.

2. New topic: probability, random variable, and expected value.

    (a) Experiment, outcomes (sample space), elementary events and events.

    (b) Probability of events in term of probabilities sample points. 

    (c) P(A union B) = P(A) + P(B) - P(A intersection B); in particular, P(A union B) = P(A) + P(B) for disjoint events A and B.

  


Lecture #25 (Apr 9)
1.   Binomial distribution.

2.   Expected value of #(H).

3.   Expected value of #(H)-#(T) =Expected value of #(H) - Expected value of #(T).


Lecture #26 (Apr 11)
More on expected value and variance of Binomial Distribution.


Lecture #27 (Apr 23)
1.  Review practice questions.

2.  Atomic proposition is a simplest sentence that has a truth value; more generally, a proposition

     is a sentence that has a truth value.  A non-atomic proposition is made of other proposition by

     combining the latter via "and", "or", "not", "if-then", etc

3.  If-then statements in a program do not have truth values, unlike if-then statements in English.

4.  Rules of combining truth values (truth-tables).


Lecture #28 (Apr 25)
1.  Review practice problems.

2.  Priorities of logical operations:

     (1) negation, (2) and, (3) or, (4) -> (5) <->

3. Tautologies, contradictions, and satisfiable propositions.

4.  Some important tautologies (here, & = logical AND):

     Modus Ponens: A & (A -> B) -> B

     Syllogism: (A -> B) & (B -> C) -> (A  -> C)

     Others: (A -> B) & (A -> C)] -> (A -> B & C)

                  (A -> C) v (B -> C) -> (A v  B -> C)

5.  Examples of Modus Ponens and Sylogism using relations "has" and "want".